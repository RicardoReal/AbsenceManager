using System;
using System.Collections.Generic;
using System.Web.DynamicData;
using System.Web.Security;
using System.Web.UI.WebControls;
using System.Linq;
using AbsenceManager.Security;

namespace AbsenceManager
{
    public partial class GridViewUsers_Edit : FieldTemplateUserControl
    {
        protected System.Web.DynamicData.MetaTable table, tableInsert;
        private string _UserName;
        
        private bool _hasOnScreenPermission;
        private bool _hasInlinePermission;

        protected bool HasInlinePermission
        {
            get { return _hasInlinePermission; }
        }

        protected bool HasOnScreenPermission
        {
            get { return _hasOnScreenPermission; }
        }

        protected bool PageReadOnly
        {
            get
            {
                AMRoleProvider gprp = (AMRoleProvider)System.Web.Security.Roles.Provider;

                ScreenPermissions sp = gprp.GetPermissionsForScreenInUser(table.Name, _UserName);

                return sp == ScreenPermissions.Read || sp == ScreenPermissions.None;
            }
        }

        protected bool ShowDeleteBtn
        {
            get
            {
                return true;
                //string path = this.Context.Request.AppRelativeCurrentExecutionFilePath;
                //return path.Contains("Roles")
                //    || path.Contains("Users")
                //    || path.Contains("Handlers")
                //    || path.Contains("Flights/Edit")
                //    || path.Contains("Areas/Edit");
            }
        }

        protected void Page_Init(object sender, EventArgs e)
        {
            var metaChildColumn = Column as MetaChildrenColumn;
            var metaForeignKeyColumn = metaChildColumn.ColumnInOtherTable as MetaForeignKeyColumn;

            if (metaChildColumn != null && metaForeignKeyColumn != null)
            {
                #region GridView/Update
                // Definir contexto/entidade
                GridDataSource.ContextTypeName = metaChildColumn.ChildTable.DataContextType.FullName;
                GridDataSource.EntitySetName = metaChildColumn.ChildTable.Name;

                // Definir update/delete/insert
                GridDataSource.EnableDelete = true;
                GridDataSource.EnableInsert = true;
                GridDataSource.EnableUpdate = true;
                //GridView1.AutoGenerateDeleteButton = true;
                //GridView1.AutoGenerateEditButton = true;

                // Get de uma instancia da MetaTable
                table = GridDataSource.GetTable();

                // Definir as datakeys da Gridview
                String[] keys = new String[metaChildColumn.ChildTable.PrimaryKeyColumns.Count];
                int i = 0;
                foreach (var keyColumn in metaChildColumn.ChildTable.PrimaryKeyColumns)
                {
                    keys[i] = keyColumn.Name;
                    i++;
                }
                GridView1.DataKeyNames = keys;

                // Gerar as colunas da gridview com o FieldTemplateRowGenerator
                // Filtrar a relação

                GridView1.ColumnsGenerator = new FieldTemplateRowGenerator(table, new string[] { metaForeignKeyColumn.Name });
                //GridView1.ColumnsGenerator = new FieldTemplateRowGenerator(table);

                // Filtros, FKs, Where clause
                GridDataSource.EntityTypeFilter = table.EntityType.Name;
                GridDataSource.Include = table.ForeignKeyColumnsNames;
                GridDataSource.AutoGenerateWhereClause = true;
                #endregion

                #region FormView/Insert
                //Insert
                // Definir contexto/entidade
                FormViewDataSource.ContextTypeName = metaChildColumn.ChildTable.DataContextType.FullName;
                FormViewDataSource.EntitySetName = metaChildColumn.ChildTable.Name;
                FormViewDataSource.EnableInsert = true;

                // Get de uma instancia da MetaTable
                tableInsert = FormViewDataSource.GetTable();

                // Filtros, FKs
                FormViewDataSource.EntityTypeFilter = tableInsert.EntityType.Name;
                FormViewDataSource.Include = tableInsert.ForeignKeyColumnsNames;

                // Pre-preenchimento das FKs do insert
                int j = 0;
                var dict = new Dictionary<string, object>();
                //if (Request.QueryString.Count > 0)
                foreach (String fkName in metaForeignKeyColumn.ForeignKeyNames)
                {
                    var fkColumn = metaChildColumn.ChildTable.GetColumn(fkName);
                    if (Request.QueryString.Count > 0)
                    {
                        if(Request.QueryString[j] == "False")
                            dict.Add(fkColumn.Name, 0);
                        else if (Request.QueryString[j] == "True")
                            dict.Add(fkColumn.Name, 1);
                        else
                            dict.Add(fkColumn.Name, Request.QueryString[j]);
                    }
                    else
                        dict.Add(fkColumn.Name, 0);
                    j++;
                }

                FormView1.SetMetaTable(Global.DefaultModel.GetTable(tableInsert.Name), dict);
                #endregion

                //                #region Script
                //                ScriptContainer.InnerHtml = @"
                //                        <script>
                //                            $(function () {
                //                                $('.DDDropDown[id]').each(
                //                                        function (index) {
                //                                            var id = $(this).attr('id');
                //
                //                                            if (id.indexOf('_" + table.Name + @"_') > 0 && id.indexOf('_" + metaForeignKeyColumn.Name + @"_') > 0) {
                //                                                $(this).parent().parent().css('display', 'none');
                //                                                $(this).parent().parent().css('visibility', 'hidden');
                //                                            }
                //                                        }
                //                                    )
                //                            });
                //                        </script>";
                //                #endregion
            }
            else
            {
                // throw an error if set on column other than MetaChildrenColumns
                throw new InvalidOperationException("The GridView FieldTemplate can only be used with MetaChildrenColumns");
            }
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            AMRoleProvider gprp = (AMRoleProvider)System.Web.Security.Roles.Provider;
            _UserName = Membership.GetUser().UserName;

            // Page Read Only
            ScreenPermissions sp = gprp.GetPermissionsForScreenInUser(table.Name, _UserName);

            if (sp == ScreenPermissions.Write)
                _hasOnScreenPermission = _hasInlinePermission = true;
            else
            {
                _hasInlinePermission = sp == ScreenPermissions.Write;
                _hasOnScreenPermission = sp == ScreenPermissions.Write;
            }

            if (!PermissionsManager.IsInsertAvailable(table) || !_hasOnScreenPermission)
                InsertHyperLink.Visible = false;
        }

        protected override void OnDataBinding(EventArgs e)
        {
            base.OnDataBinding(e);

            //GridView
            var metaChildrenColumn = Column as MetaChildrenColumn;
            var metaForeignKeyColumn = metaChildrenColumn.ColumnInOtherTable as MetaForeignKeyColumn;
            int i = 0;

            foreach (String fkName in metaForeignKeyColumn.ForeignKeyNames)
            {
                var fkColumn = metaChildrenColumn.ChildTable.GetColumn(fkName);

                var param = new Parameter();
                param.Name = fkColumn.Name;
                param.Type = fkColumn.TypeCode;

                if (Request.QueryString.Count > 0)
                {
                    if (Request.QueryString[i] == "False")
                        param.DefaultValue = "0";
                    else if (Request.QueryString[i] == "True")
                        param.DefaultValue = "1";
                    else
                        param.DefaultValue = Request.QueryString[i];
                }
                else
                    param.DefaultValue = "0";

                GridDataSource.WhereParameters.Add(param);

                i++;
            }

            #region Testes Iniciais
            //Teste
            //var param = new Parameter();
            //param.Name = "FooterMessage";
            //param.Type = TypeCode.Int64;
            //param.DefaultValue = "1";
            //GridDataSource.WhereParameters.Add(param);

            // Não colocar where/where params no load

            // Filtrar os resultados da gridview
            // supoe que o parametro é long e que é passado como o primeiro dos argumentos
            //string valor = Context.Request.Params[0].ToString();
            //string campo = ((UIHintAttribute)this.Column.Attributes[typeof(UIHintAttribute)]).ControlParameters["ID"].ToString();
            //GridDataSource.AutoGenerateWhereClause = true;
            ////GridDataSource.WhereParameters.Add(campo, DbType.Int64, valor);
            //GridDataSource.WhereParameters.Add("LanguageID", DbType.Int64, "1");
            #endregion

            #region Exemplo para Linq to SQL
            /*
             * 
            // get the association attributes associated with MetaChildrenColumns
            var association = metaChildrenColumn.Attributes.
                OfType<System.Data.Linq.Mapping.AssociationAttribute>().FirstOrDefault();
            
            if (metaForeignKeyColumn != null && association != null)
            {

                // get keys ThisKey and OtherKey into Pairs
                var keys = new Dictionary<String, String>();
                var seperator = new char[] { ',' };
                var thisKeys = association.ThisKey.Split(seperator);
                var otherKeys = association.OtherKey.Split(seperator);
                for (int i = 0; i < thisKeys.Length; i++)
                {
                    keys.Add(otherKeys[i], thisKeys[i]);
                }

                // setup the where clause 
                // support composite foreign keys
                foreach (String fkName in metaForeignKeyColumn.ForeignKeyNames)
                {
                    // get the current pk column
                    var fkColumn = metaChildrenColumn.ChildTable.GetColumn(fkName);

                    // setup parameter
                    var param = new Parameter();
                    param.Name = fkColumn.Name;
                    param.Type = fkColumn.TypeCode;

                    // get the PK value for this FK column using the fk pk pairs
                    param.DefaultValue = Request.QueryString[keys[fkName]];

                    // add the where clause
                    GridDataSource.WhereParameters.Add(param);
                }
            }
             * */
            #endregion
        }

        // Não mostar a FormView no momento em que se edita um registo da GridView
        protected void GridView1_RowEditing(object sender, EventArgs e)
        {
            FormView1.ChangeMode(FormViewMode.ReadOnly);
        }

        protected void GridView1_SelectedIndexChanging(object sender, EventArgs e)
        {
            GridView1.EditIndex = -1;
            FormView1.ChangeMode(FormViewMode.ReadOnly);
        }

        protected void GridView1_RowDeleted(object sender, GridViewDeletedEventArgs e)
        {
            if (e.Exception != null)
            {
                GeneralHelpers.ShowJavascriptAlert("O registo não pode ser apagado neste momento.");
                e.ExceptionHandled = true;
            }
        }

        // Refresh da GridView após um insert
        protected void FormViewDataSource_Inserted(object sender, EntityDataSourceChangedEventArgs e)
        {
            if (e.Exception != null)
            {
                customValida.IsValid = false;
                customValida.ErrorMessage = e.Exception.Message;
                e.ExceptionHandled = true;
            }
            else GridView1.DataBind();
        }

        protected void FormViewDataSource_Inserting(object sender, EntityDataSourceChangingEventArgs e)
        {
            Type entityType = e.Entity.GetType();
            long? Id = long.Parse(Context.Request.QueryString["ID"]);

            //RoleUser ras = e.Entity as RoleUser;
            //ras.UserID = (long)Id;
            
        }

        // Toogle do panel de insert
        protected void lkbToggle_Click(object sender, EventArgs e)
        {
            FormViewMode fvm = (FormView1.CurrentMode == FormViewMode.ReadOnly) ? FormViewMode.Insert : FormViewMode.ReadOnly;
            FormView1.ChangeMode(fvm);
        }
    }
}
